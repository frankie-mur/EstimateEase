package components

import "fmt"

// RoomPageData data needed for the room page html template
type RoomPageData struct {
	RoomName       string
	DisplayName string
	RoomID         string
    RoomURL string
    VoteMap VoteMapData
}

templ RoomPage(pageData RoomPageData) {
    @Base() {
        <div class="flex-grow flex items-center justify-center">
                <div class="text-center p-6 md:p-12 rounded-lg shadow-xl">
                    <h1 class="text-2xl font-semibold mb-8">Room Name: { pageData.RoomName } </h1>

                    <div hx-ext="ws" ws-connect={ fmt.Sprintf("/ws/room/%v/%v", pageData.RoomID, pageData.DisplayName)}>
                        <div id="room-data">@VotingGrid(pageData.VoteMap)</div>
                        <div class="flex flex-wrap gap-6 justify-center">
                            <!-- Form 1 -->
                            <form id="form1" ws-send class="rounded-lg bg-blue-500 p-4 shadow-lg">
                                <input type="hidden" id="payload1" name="payload" value="1" readonly/> 
                                <button class="btn btn-lg text-white" type="submit"> 1 </button>
                            </form>
                            <!-- Form 3 -->
                            <form id="form3" ws-send class="rounded-lg bg-green-500 p-4 shadow-lg">
                                <input type="hidden" id="payload3" name="payload" value="3" readonly/> 
                                <button class="btn btn-lg text-white" type="submit"> 3 </button>
                            </form>
                            <!-- Form 5 -->
                            <form id="form5" ws-send class="rounded-lg bg-yellow-500 p-4 shadow-lg">
                                <input type="hidden" id="payload5" name="payload" value="5" readonly/> 
                                <button class="btn btn-lg text-white" type="submit"> 5 </button>
                            </form>
                            <!-- Form 8 -->
                            <form id="form8" ws-send class="rounded-lg bg-red-500 p-4 shadow-lg">
                                <input type="hidden" id="payload8" name="payload" value="8" readonly/> 
                                <button class="btn btn-lg text-white" type="submit"> 8 </button>
                            </form>
                        </div>
                        <div id="room-count"></div>
                        @showVotesBtn()
                    </div>
                        <div class="badge badge-primary m-2">Invite Link</div>
                        <a id="invite" class="link link-info"> { pageData.RoomURL } </a>
                        <button class="btn btn-accent m-2" onclick="copyLink()">Copy Link</button>
                </div>
        </div>

        <script>
            function copyLink() {
                var link = document.getElementById('invite').text;
                    navigator.clipboard.writeText(link)
                    .then(() => {
                        console.log('Link copied to clipboard');
                    })
                    .catch(err => {
                        console.error('Error in copying text: ', err);
                    });
                }
        </script>
    }
}

type VoteMapData struct {
    SortedNames []string
	VoteMap map[string]string
    ShowVotes bool
    Stats []StatValues
}

templ VotingGrid(voteMap VoteMapData) {
    <div id="room-data" class="p-6">
        <div class="overflow-x-auto">
            <table class="table table-zebra w-full text-sm md:text-base">       
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Vote</th>
                    </tr>
                </thead>
                <tbody>
                    for _, name := range voteMap.SortedNames {
                        <tr>
                            <td class="py-2 px-4"> {name} </td>
                            switch {
                                case voteMap.VoteMap[name] == "": 
                                    <td class="py-2 px-4"> ❌ </td>
                                case voteMap.ShowVotes:
                                    <td class="py-2 px-4"> {voteMap.VoteMap[name]} </td>
                               default: 
                                <td class="py-2 px-4"> ✅ </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div> 
    </div>
    if len(voteMap.Stats) != 0 {
            @Stats(voteMap.Stats)
    }
}

type StatValues struct {
    StatName string
    StatValue string
}

templ Stats(stats []StatValues) {
    <div id="room-count">
        <div class="stats shadow">
            <div class="stat">
            for _, stat := range stats {
                if stat.StatValue != "" {
                    <div class="stat-title">
                        { stat.StatName }
                    </div>
                    <div class="stat-value">
                        { stat.StatValue }
                    </div>
                }
            }
            </div>
        </div>
    </div>
}

templ showVotesBtn() {
    <form id="show-votes" ws-send>
        <input type="hidden" id="payloadshowvotes" name="payload" value="show-votes" readonly/> 
        <button class="btn btn-wide" type="submit"> Show Votes </button>
    </form>
}