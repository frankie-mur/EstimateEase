package components

import "fmt"

	
var voteTypeMap = map[string][]string{
	"Fibonacci": {"1", "3", "5", "8", "13"},
	"True/False": {"True", "False"},
}

// RoomPageData data needed for the room page html template
type RoomPageData struct {
	RoomName    string
	DisplayName string
    VoteType    string
	RoomID      string
    RoomURL     string
    VoteMap     VoteMapData
}

templ RoomPage(pageData RoomPageData) {
    @Base() {
        <div class="flex-grow flex items-center justify-center">
                <div class="text-center p-6 md:p-12 rounded-lg shadow-xl">
                    <h1 class="text-2xl font-semibold mb-8">Room Name: { pageData.RoomName } </h1>

                    <div hx-ext="ws" ws-connect={ fmt.Sprintf("/ws/room/%v/%v", pageData.RoomID, pageData.DisplayName)}>
                        <div id="room-data">@VotingGrid(pageData.VoteMap)</div>
                        <div class="flex flex-wrap gap-6 justify-center">
                            for _, vote := range voteTypeMap[pageData.VoteType] {
                                <form id="form1" ws-send class="rounded-lg p-4 shadow-lg">
                                    <input type="hidden" id="payload1" name="payload" value={ vote } readonly/> 
                                     <button class="btn btn-lg btn-outline border-blue-500 text-blue-500 rounded-full px-6 py-2 hover:bg-blue-500 hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" type="submit"> 
                                        { vote } 
                                    </button>
                                </form>
                            }
                        </div>
                        <div id="room-count"></div>
                        @showVotesBtn()
                    </div>
                        <div class="badge badge-primary m-2">Invite Link</div>
                        <a id="invite" class="link link-info"> { pageData.RoomURL } </a>
                        <button class="btn btn-accent m-2" onclick="copyLink()">Copy Link</button>
                </div>
        </div>

        <script>
            function copyLink() {
                var link = document.getElementById('invite').text;
                    navigator.clipboard.writeText(link)
                    .then(() => {
                        console.log('Link copied to clipboard');
                    })
                    .catch(err => {
                        console.error('Error in copying text: ', err);
                    });
                }
        </script>
    }
}

type VoteMapData struct {
    SortedNames []string
	VoteMap map[string]string
    ShowVotes bool
    Stats []StatValues
}

templ VotingGrid(voteMap VoteMapData) {
    <div id="room-data" class="p-6">
        <div class="overflow-x-auto">
        <table class="table table-zebra w-full text-sm md:text-base rounded-lg shadow-lg">
        <thead>
            <tr class="bg-blue-600 text-white">
                <th class="py-3 px-4 text-left">Name</th>
                <th class="py-3 px-4 text-left">Vote</th>
            </tr>
        </thead>
        <tbody>
            for _, name := range voteMap.SortedNames {
            <tr class="hover:bg-gray-100">
                <td class="py-2 px-4 border-t border-gray-200"> {name} </td>
                switch {
                case voteMap.VoteMap[name] == "": 
                    <td class="py-2 px-4 border-t border-gray-200"> ❌ </td>
                case voteMap.ShowVotes:
                    <td class="py-2 px-4 border-t border-gray-200"> {voteMap.VoteMap[name]} </td>
                default: 
                    <td class="py-2 px-4 border-t border-gray-200"> ✅ </td>
                }
            </tr>   
        }
        </tbody>
        </table>
        </div> 
    </div>
    if len(voteMap.Stats) != 0 {
            @Stats(voteMap.Stats)
    }
}

type StatValues struct {
    StatName string
    StatValue string
}

templ Stats(stats []StatValues) {
    <div id="room-count">
        <div class="stats bg-warning text-primary-content stats-vertical lg:stats-horizontal shadow">
            for _, stat := range stats {
                    if stat.StatValue != "" {
                        <div class="stat">
                            <div class="stat-title text-primary-content">
                                { stat.StatName }
                            </div>
                            <div class="stat-value">
                                { stat.StatValue }
                            </div>
                        </div>
                    }
            }
        </div>
    </div>
}

templ showVotesBtn() {
    <form id="show-votes" ws-send>
        <input type="hidden" id="payloadshowvotes" name="payload" value="show-votes" readonly/> 
        <button class="btn btn-wide btn-outline m-4" type="submit"> Show Votes </button>
    </form>
}
